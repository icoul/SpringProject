<?xml version="1.0" encoding="UTF-8"?>

<!-- #11. mapper 기본 설정 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- #12. 루트 엘리먼트 및 네임스페이스 설정하기(이 네임스페이스의 이름은 프로젝트 전체 내에서 반드시 고유해야만 한다.) --> 
<mapper namespace="board">

	<!-- #24. 글쓰기 -->
	<!-- <insert id="add" parameterType ="com.spring.board.model.BoardVO" >
		insert into tblBoard(seq, name, subject, content, pw, readCount, regDate, status)
		values(boardSeq.nextval, #{name}, #{subject}, #{content}, #{pw}, default, default, default)
	</insert> -->
	
	<!-- #74. 글쓰기  -->
	<insert id="add" parameterType ="com.spring.board.model.BoardVO" >
		<if test='fk_seq.equals("")'>
			insert into tblBoard(seq, name, subject, content, pw, readCount, regDate, status, groupno)
			values(boardSeq.nextval, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno})		
		</if>
		
		<if test='!fk_seq.equals("")'>
			insert into tblBoard(seq, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depth)
			values(boardSeq.nextval, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depth}+1)
		</if>
	</insert>
	
	<!-- #89. 파일첨부 글쓰기  -->
	<insert id="add_withFile" parameterType ="com.spring.board.model.BoardVO" >
		<if test='fk_seq.equals("")'>
			insert into tblBoard(seq, name, subject, content, pw, readCount, regDate, status, groupno, fileName, orgFileName, fileSize)
			values(boardSeq.nextval, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fileName, jdbcType=VARCHAR}, #{orgFileName}, #{fileSize})		
		</if>
		
		<if test='!fk_seq.equals("")'>
			insert into tblBoard(seq, name, subject, content, pw, readCount, regDate, status, groupno, fk_seq, depth, fileName, orgFileName, fileSize)
			values(boardSeq.nextval, #{name}, #{subject}, #{content}, #{pw}, default, default, default, #{groupno}, #{fk_seq}, #{depth}+1, #{fileName, jdbcType=VARCHAR}, #{orgFileName}, #{fileSize})
		</if>
	</insert>
	
	<!-- #80. 글의 groupno 최대값 구하기, 답글쓰기 -->
	<select id = "getGroupMaxno" resultType="Int">
		select nvl( max(groupno), 0)
		from tblBoard
	</select>
	
	<!-- #28. 글 목록 가져오기 -->
	<!-- <select id="list" resultType="com.spring.board.model.BoardVO">
		select seq, name, subject, content, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regdate
		from tblBoard
		where status = 1
		order by seq desc
	</select> -->
	
	<!-- #57. 글 목록 가져오기 -->
	<!-- 
	<select id="list" resultType="com.spring.board.model.BoardVO">
		select seq, name, subject, content, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regdate
			   ,commentCount
		from tblBoard
		where status = 1
		order by seq desc
	</select> -->
	
	<!-- #65. 글 목록 가져오기 (검색어 존재) -->
	<!-- <select id="list" parameterType="java.util.HashMap" resultType="com.spring.board.model.BoardVO">
		select seq, name, subject, content, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regdate
			   ,commentCount
		from tblBoard
		where status = 1 
			  <if test="colname != null and search != null">
			  	  and ${colname} like '%' || #{search} || '%'
			  </if>
		order by seq desc
	</select> -->
	
	<!-- #68. 글 목록 가져오기 (검색어 존재, 페이징 처리) -->
	<!-- <select id="list" parameterType="java.util.HashMap" resultType="com.spring.board.model.BoardVO">
		select T.*
		from
		(
			select rownum as RNO, V.seq, V.name, V.subject, V.content, V.readcount, V.regdate, V.commentCount
			from
				(
					select seq, name, case when length(subject) > 20 then substr(subject, 1, 18) || '..'
					                       else subject end as subject
					    , content, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regdate
					    , commentCount
					from tblBoard
					where status = 1
						  <if test="colname != null and search != null">
							  	  and ${colname} like '%' || #{search} || '%'
						  </if>
					order by seq desc
				)V
			)T
		where T.RNO >= #{start} and T.RNO <![CDATA[<]]>= #{end}
	</select> -->
	
	<!-- #75. 글 목록 가져오기 (검색어 존재, 페이징 처리)
			    답변형 게시판 글 목록	 -->
	<select id="list" parameterType="java.util.HashMap" resultType="com.spring.board.model.BoardVO">
		select T.*
		from
		(
			select rownum as RNO, V.seq, V.name, V.subject, V.content, V.readcount, V.regdate, V.commentCount, V.groupno, V.fk_seq, V.depth, V.fileName, V.orgFileName, V.fileSize
			from
				(
					select seq, name, case when length(subject) > 20 then substr(subject, 1, 18) || '..'
					                       else subject end as subject
					    , content, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regdate
					    , commentCount, groupno, fk_seq, depth, fileName, orgFileName, fileSize
					from tblBoard
					where status = 1
						  <if test='colname != null and search != null'>
							  	  and ${colname} like '%' || #{search} || '%'
						  </if>
				    start with fk_seq = 0
         			connect by prior seq = fk_seq
				    order siblings by groupno desc, seq asc
				)V
			)T
		where T.RNO >= #{start} and T.RNO <![CDATA[<]]>= #{end}
	</select>
	
	<!-- #72. 총 게시물 건수 구하기 -->
	<select id = "getTotalCount" parameterType="java.util.HashMap" resultType="int" >
		select count(*)
		from tblBoard
		where status = 1
			  <if test="colname != null and search != null">
			  	and ${colname} like '%' || #{search} || '%'
			  </if>
	</select>
	
	<!-- #32. 글 1개만 가져오기 -->
	<select id = "view" parameterType="String" resultType = "com.spring.board.model.BoardVO" >
		select seq, name, subject, content, readcount, to_char(regdate, 'yyyy-mm-dd hh24:mi:ss') as regdate, groupno, depth, fileName, orgFileName, fileSize
		from tblBoard
		where status = 1 and seq = #{seq}
	</select>
	
	<!-- #33. 조회수 업데이트 메서드 -->
	<update id="updateReadCount" parameterType="String">
		update tblBoard set readcount = readcount + 1
		where status = 1 and seq = #{seq}
	</update>
	
	<!-- #38. 글 수정, 삭제 시 비밀번호 체크 -->
	<select id="checkPW" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from tblBoard
		where seq = #{seq} and pw = #{pw}
	</select>
	
	<!-- #39. 글 수정 업데이트 -->
	<update id = "updateContent" parameterType="java.util.HashMap">
		update tblBoard set subject = #{subject}, content = #{content}
		where seq = #{seq}
	</update>
	
	<!-- #44. 글 수정 업데이트 -->
	<update id = "delContent" parameterType="java.util.HashMap">
		update tblBoard set status = 0
		where seq = #{seq}
	</update>
	
	<!-- #51. 댓글 쓰기 -->
	<insert id = "addComment" parameterType="com.spring.board.model.CommentVO">
		insert into tblComment(seq, name, content, regDate, parentSeq, status)
		values(commentSeq.nextval, #{name}, #{content}, default, #{parentSeq}, default)
	</insert>
	
	<!-- #51. 댓글 쓰기 이후에 tblBoard 테이블에 commentcount 1 추가 -->
	<update id = "updateCommentCount" parameterType="String">
		update tblBoard set commentCount = commentCount + 1
		where seq = #{parentSeq}
	</update>
	
	<!--  #55. 댓글 목록 가져오기 -->
	<select id = "listComment" parameterType="String" resultType="com.spring.board.model.CommentVO">
		select seq, name, content, to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate
			  ,parentSeq, status
		from tblComment
		where status = 1 and parentSeq = #{seq}
		order by seq desc
	</select>
	
	<!-- #60. 해당 글에 댓글이 몇 개 있는지 확인 -->
	<select id = "isExistsComment" parameterType="java.util.HashMap" resultType="int">
		select count(*)
		from tblComment
		where parentSeq = #{seq}
	</select>
	
	<!-- #60. 해당 글의 댓글들 삭제하기 -->
	<update id = "delComment" parameterType="java.util.HashMap">
		update tblComment set status = 0
		where parentSeq = #{seq}
	</update>
	
	<!-- 검색어 입력시 자동완성 기능 -->	
	<resultMap type="java.util.HashMap" id="wordResultMap">
		<result column="forwardWord" 	property="forwardWord" 	javaType="String" />
		<result column="searchword" 	property="searchword" 	javaType="String" />
		<result column="backword" 		property="backword" 	javaType="String" />
	</resultMap>
	
	<select id = "searchWordList" parameterType = "java.util.HashMap" resultMap = "wordResultMap">
			select distinct
			       substr(${colname}, 1, instr(${colname}, #{search}, 1, 1)-1) as forwardWord 
			      ,substr(${colname}, instr(${colname}, #{search}, 1, 1), length(#{search})) as searchword
			      ,substr(${colname}, instr(${colname}, #{search}, 1, 1)+length(#{search}), length(${colname})-instr(${colname}, #{search}, 1, 1)+length(#{search})) as backword
			from tblBoard
			where lower(${colname}) like '%' || lower(#{search}) || '%'
	</select>
	
	<resultMap type="java.util.HashMap" id="contentResultMap">
		<result column="content" 	property="content" 	javaType="String" />
	</resultMap>
	
	<select id = "searchWordContentList" parameterType = "java.util.HashMap" resultMap = "contentResultMap">
			select substr(content, instr(content, #{search}, 1, 1), length(#{search})) as searchword
				  ,substr(content, instr(content, #{search}, 1, 1) + length(#{search}), 5) as content
			from tblBoard
			where lower(content) like '%' || lower(#{search}) || '%'
	</select>
</mapper>