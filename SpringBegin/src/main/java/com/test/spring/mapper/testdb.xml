<?xml version="1.0" encoding="UTF-8"?>

<!-- #7. mapper 기본설정 -->
 <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"> 

<!-- #8. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.)-->
<mapper namespace="testdb">

	<insert id = "mbt1">
		insert into tbl_mybatistest(no, name, email, tel, addr, writeday) 
		values (seq_mybatistest.nextval, '홍길동'||seq_mybatistest.nextval, 'honkd@naver.com', '010-234-5678', '서울시 강남구 역삼동', default)
	</insert>
	
	<!-- 데이터를 전달받아서 SQL구문에 넣는 법 
	1. 단일데이터(primitive type) ==> #{name}으로 하면 된다.
	이 때 name 또는 아무 변수명 예를 들어 #irum이라고 해도 가능하다.
	어차피 넘겨받은 데이터가 하나 뿐이기 때문이다. -->
	<insert id = "mbt2">
		insert into tbl_mybatistest(no, name, email, tel, addr, writeday) 
		values (seq_mybatistest.nextval, #{name} || seq_mybatistest.nextval, 'leeyr@naver.com', '010-234-5678', '서울시 강남구 역삼동', default)
	</insert>
	
	<!-- 데이터를 전달받아서 SQL구문에 넣는 법 
	2. DTO(VO)로 전달받아서 DB에 insert하는 것입니다.
		==> 매개변수(parameter타입)는 반드시 풀네임(패키지명)으로 기재해야한다.
			parameter type이 VO라면 #{VO의 멤버변수명}이다.-->
	<insert id = "mbt3" parameterType="com.test.spring.MybatisTestVO">
		insert into tbl_mybetistest(no, name, email, tel, addr, writeday) 
		values (seq_mybetistest.nextval, #{name}, #{email}, #{tel}, #{addr}, default)
	</insert>
	
	<insert id = "mbt4" parameterType="com.test.spring.MybatisTestVO">
		insert into tbl_mybetistest(no, name, email, tel, addr, writeday) 
		values (seq_mybetistest.nextval, #{name}, #{email}, #{tel}, #{addr}, default)
	</insert>
	
	
	<!-- 데이터를 전달받아서 SQL구문에 넣는 법 
	3. HashMap으로 전달받아서 DB에 insert하는 것입니다.
		==> 매개변수(parameter타입)는 반드시 풀네임(패키지명)으로 기재해야한다.
			parameter type이 HashMap라면 #{KEY값}이다.-->
	<insert id = "mbt5" parameterType="java.util.HashMap">
		insert into tbl_mybetistest(no, name, email, tel, addr, writeday) 
		values (seq_mybetistest.nextval, #{name}, #{email}, #{tel}, #{addr}, default)
	</insert>
	
	<insert id = "mbt6" parameterType="java.util.HashMap">
		insert into tbl_mybetistest(no, name, email, tel, addr, writeday) 
		values (seq_mybetistest.nextval, #{heowon.name}, #{heowon.email}, #{heowon.tel}, #{heowon.addr}, default)
	</insert>
	
	
	
	<!-- 단일 데이터 조회 -->
	<select id = "mbt7" parameterType="String" resultType="String">
		select name
		from tbl_mybetistest
		where no = #{no}
	</select>
	
	<!-- 단일 데이터 조회(VO객체 타입, 1개행만 추출) -->
	<select id = "mbt8" parameterType="String" resultType="com.test.spring.MybatisTestVO">
		select no, name, email, tel, addr, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
		from tbl_mybetistest
		where no = #{no}
	</select>
	
	<!-- 다중 데이터 조회
		  아무리 List타입을 리턴해야한다 하더라도 resultType은 List타입으로 해주면 오류가 발생한다.
		  반드시 List타입에 들어간 객체타입(현재 MybatisTestVO)을 사용해야한다.  -->
	<select id = "mbt9" parameterType="String" resultType="com.test.spring.MybatisTestVO">
		select no, name, email, tel, addr, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
		from tbl_mybetistest
	</select>
	
	<!-- 다중 데이터 조회 - 컬럼명과 VO이름이 다른 경우 resultMap을 이용하여 해결한다-->
	<resultMap type="com.test.spring.MybatisTestVO" id="dataResultMap">
		<result column="num" 			property="no" 		javaType="int" />
		<result column="irum" 			property="name" 	javaType="String" />
		<result column="email" 			property="email" 	javaType="String"  />
		<result column="telephone" 		property="tel" 		javaType="String" />
		<result column="address" 		property="addr" 	javaType="String" />
		<result column="registerday" 	property="writeday" javaType="String" />
	</resultMap>
	
	<select id = "mbt10" resultMap="dataResultMap">
		select num, irum, email, telephone, address, to_char(registerday, 'yyyy-mm-dd hh24:mi:ss') as registerday
		from tbl_mybetistest2
		order by num desc
	</select>
	
	
	<!-- 다중 데이터 조회 - 컬럼명과 VO이름이 다른 경우 resultMap을 이용하여 해결한다-->
	<!-- xml에서 select 문을 쓸 때 컬럼명에 대한 alias명을 VO의 property명으로 사용하여 해결한다. -->	
	<select id = "mbt11">
		select num as no, irum as name, email, telephone as tel, address as addr, to_char(registerday, 'yyyy-mm-dd hh24:mi:ss') as writeday
		from tbl_mybetistest2
		order by no desc
	</select>
	
	
	<!-- 다중 데이터 조회 - 컬럼명과 VO이름이 다른 경우 resultMap을 이용하여 해결한다-->
	<!-- 컬럼 1개짜리 다중행을 추출하도록 해본다.	VO를 사용해도 되지만 컬럼 1개짜리를 위해 굳이 생성하는 것보다
	SQL문에서 || 를 이용하여 리턴타입을 String으로 사용하는 것이 편하다.	 -->
	<select id = "mbt12" parameterType="String" resultType="String">
		select name || ' ' || email || ' ' || tel || ' ' || addr as Info
		from tbl_mybetistest
		where name like '%'|| #{name} ||'%'
		order by no desc
	</select>
	
	<!-- 다중 데이터 조회
		  중요!! : 
		 1. 데이터로 사용할 때는 #{key명}
		 2. 식별자(테이블, 컬럼명)으로 사용할 때는 ${key명}
		 3. myBatis에서 제공하는 if 엘리먼트 안에서 사용할 때는 key명 그대로 쓴다.-->
	<select id = "mbt13" parameterType="java.util.HashMap" resultType="com.test.spring.MybatisTestVO">
		select no, name, email, tel, addr, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
		from tbl_mybetistest
		<if test="colName != null and searchWord != null">
			where ${colName} like '%' || #{searchWord} || '%' 
		</if>
		order by no desc
	</select>
	
	
	<!-- 다중 데이터 조회 -->
	<select id = "mbt14" parameterType="java.util.HashMap" resultType="com.test.spring.MybatisTestVO">
		select no, name, email, tel, addr, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
		from tbl_mybetistest
		where 1=1
		<if test="colName != null and searchWord != null">
			and ${colName} like '%' || #{searchWord} || '%' 
		</if>
		<if test="dayDifference == 0">
			and to_date( to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd') - to_date( to_char(writeday, 'yyyy-mm-dd'), 'yyyy-mm-dd') = 0 
		</if>
		<if test="dayDifference > 0">
			and to_date( to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd') - to_date( to_char(writeday, 'yyyy-mm-dd'), 'yyyy-mm-dd') <![CDATA[<]]>= #{dayDifference} 
		</if>
		order by no desc
	</select>

	<!-- 다중 데이터 조회 -->	
	
	<resultMap type="java.util.HashMap" id="dataResultMap2">
		<result column="no" 		property="no" 		javaType="int" />
		<result column="name" 		property="name" 	javaType="String" />
		<result column="email" 		property="email" 	javaType="String" />
		<result column="tel" 		property="tel" 		javaType="String" />
		<result column="addr" 		property="addr" 	javaType="String" />
		<result column="writeday" 	property="writeday" javaType="String" />
	</resultMap>
	
	<select id = "mbt15" resultMap="dataResultMap2" parameterType="java.util.HashMap">
		select no, name, email, tel, addr, to_char(writeday, 'yyyy-mm-dd hh24:mi:ss') as writeday
		from tbl_mybetistest
		where 1=1
		<if test="colName != null and searchWord != null">
			and ${colName} like '%' || #{searchWord} || '%' 
		</if>
		<if test="dayDifference == 0">
			and to_date( to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd') - to_date( to_char(writeday, 'yyyy-mm-dd'), 'yyyy-mm-dd') = 0 
		</if>
		<if test="dayDifference > 0">
			and to_date( to_char(sysdate, 'yyyy-mm-dd'), 'yyyy-mm-dd') - to_date( to_char(writeday, 'yyyy-mm-dd'), 'yyyy-mm-dd') <![CDATA[<]]>= #{dayDifference} 
		</if>
		order by no desc
	</select>
	
	
	<!-- 다중 데이터 조회 -->	
	
	<insert id = "mbt16" parameterType="java.util.HashMap">
		insert into tbl_mybetistest values(seq_mybetistest.nextval, #{name}, #{email}, #{tel}, #{addr}, default)
	</insert>
	
	
	<!-- 다중 데이터 조회 -->	
	<resultMap type="java.util.HashMap" id="employeeDeptResultMap">
		<result column="department_id" 		property="DEPARTMENT_ID" 	javaType="String" />
		<result column="department_name" 	property="DEPARTMENT_NAME" 	javaType="String" />
		<result column="employee_id" 		property="EMPLOYEE_ID" 		javaType="String" />
		<result column="ename" 				property="ENAME" 			javaType="String" />
		<result column="hire_date" 			property="HIRE_DATE" 		javaType="String" />
		<result column="jubun" 				property="JUBUN" 			javaType="String" />
		<result column="gender" 			property="GENDER"		 	javaType="String" />
		<result column="age" 				property="AGE" 				javaType="String" />
		<result column="yearpay" 			property="YEARPAY"		 	javaType="String" />
	</resultMap>
	
	<select id = "mbt17" resultMap="employeeDeptResultMap" >
		select *
		from view_employeeDept
	</select>
	
	
	<!-- 다중 데이터 조회 -->	
	<select id = "mbt18" parameterType="java.util.HashMap" resultMap="employeeDeptResultMap" >
		select *
		from view_employeeDept
		where 1=1
		<if test="department_id != null and department_id == -999">
			and department_id is null
		</if>
		<if test="department_id != null and department_id > 0">
			and department_id = #{department_id}
		</if>
		<if test="gender != null and !gender.equals('전체') ">
			and gender = #{gender}
		</if>
		<if test="ageline != null and !ageline.equals('성별') ">
			and trunc(age, -1) = #{ageline}
		</if>
	</select>
	
	<resultMap type="java.util.HashMap" id="deptResultMap">
		<result column="department_id" 		property="DEPARTMENT_ID" 	javaType="String" />
		<result column="department_name" 	property="DEPARTMENT_NAME" 	javaType="String" />
	</resultMap>
	
	<select id = "mbt18_dep" resultMap="deptResultMap" >
		select distinct nvl(department_id, -999) as department_id, nvl(department_name, 'none') as department_name
		from view_employeedept
	</select>
	
	
	<!-- 다중 데이터 조회 -->	
	<select id = "mbt19" parameterType="java.util.HashMap" resultMap="employeeDeptResultMap" >
		select *
		from view_employeeDept
		where 1=1
		<if test="department_id_Arr != null">
			and department_id in 
			<foreach collection="department_id_Arr" item="item" index="i" open="(" close=")" separator="," >
				${department_id_Arr[i]}
			</foreach>
		</if>
		<if test="gender != null and !gender.equals('전체') ">
			and gender = #{gender}
		</if>
		<if test="ageline != null and !ageline.equals('-10') ">
			and trunc(age, -1) = #{ageline}
		</if>
	</select>
</mapper>